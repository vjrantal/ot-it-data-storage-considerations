{
	"name": "WriteParquet",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "samplesp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "a9bbd457-8300-4b57-b2d2-0a2075835a9b"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"49d611cb-034b-4429-996d-403044a0b8c0": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
										"1": "2846",
										"2": "2023-05-26 00:33:46",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
										"1": "9080",
										"2": "2023-05-26 16:22:55",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\28865def-ca5b-4088-84db-0dc5e3696ed0",
										"1": "8980",
										"2": "2023-05-26 22:57:35",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
										"1": "4295",
										"2": "2023-05-26 07:34:19",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
										"1": "7857",
										"2": "2023-05-26 07:37:51",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\b0d6614d-157c-48e2-a3fe-d43937fa311e",
										"1": "1821",
										"2": "2023-05-26 02:59:41",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
										"1": "6338",
										"2": "2023-05-26 21:03:43",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
										"1": "9475",
										"2": "2023-05-26 08:36:36",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\d1af907e-65b4-48fd-8a1f-79cf51f57688",
										"1": "4185",
										"2": "2023-05-26 10:15:10",
										"3": "0",
										"4": "2023-05-26"
									},
									{
										"0": "ns=2;s=Number\\e56d2f93-6288-4ae0-b5e4-73f566a468ef",
										"1": "2502",
										"2": "2023-05-26 22:02:12",
										"3": "0",
										"4": "2023-05-26"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "NodeId",
										"type": "string"
									},
									{
										"key": "1",
										"name": "Value",
										"type": "bigint"
									},
									{
										"key": "2",
										"name": "SourceTimestamp",
										"type": "timestamp"
									},
									{
										"key": "3",
										"name": "StatusCode",
										"type": "bigint"
									},
									{
										"key": "4",
										"name": "Date",
										"type": "date"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"0"
									],
									"seriesFieldKeys": [
										"1"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/471c3172-215c-4465-9229-f07e1bdc7049/resourceGroups/paul-apa-rg/providers/Microsoft.Synapse/workspaces/paul-apa-syn/bigDataPools/samplesp",
				"name": "samplesp",
				"type": "Spark",
				"endpoint": "https://paul-apa-syn.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/samplesp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# import the packages\r\n",
					"import time"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# read the raw spark dataframe\r\n",
					"\r\n",
					"df = spark.read.format(\"parquet\").load(\"raw_data\")\r\n",
					"display(df.limit(10))"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# writing out the \r\n",
					"start_time = time.perf_counter()\r\n",
					"df.write.partitionBy(\"Date\").mode('overwrite').format(\"parquet\").save(\"parquet_write\")\r\n",
					"elapsed_time = time.perf_counter() - start_time\r\n",
					"print(f\"Elapsed time: {elapsed_time:0.4f} seconds\")"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import Row\r\n",
					"\r\n",
					"output_df = spark.createDataFrame([Row(write_time=elapsed_time)])\r\n",
					"output_df.write.mode('append').save('parquet_write_times')"
				]
			}
		]
	}
}